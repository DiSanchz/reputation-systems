## This file trains and tests the RNN in inference.py with data sets generated by models.py

from inference_threshold_testing import *
from models_threshold_testing import *

RD.seed()

#
# global number_of_features
#
# number_of_features = 1

if __name__ == '__main__':


    params = {'product_tracked': 0,
              'prices': [10, 11, 12, 13],
              'product_features': [1, 2, 3, 4],
              'total_number_of_reviews': 20,
              #'input_type': 'kurtosis',
               #'input_type': 'averages',
              'input_type': 'histograms',
              # 'input_histograms_are_normalized': True,
              }

    dynamics = market(params)

    model = RNN()

    model.empty_losses()

    print('pretraining performance on the traning set')
    training_sample = dynamics.genTorchDataset(2)
    print(100 * model.evaluateAveragePerformance(training_sample))

    print('doTraining on the traning set')

    model.doTraining(training_sample, batch_size = 1, window_length_loss=2, verbose = True ,
                     save = True , file_name = 'model_tuned.pkl')
    print('perforamce on Trainging set AFTER')
    print(100 * model.evaluateAveragePerformance(training_sample))
    model.plot_losses()
    model.save_losses()
    print(model.training_losses)


    print('performance on Test set after training')

    test_sample = dynamics.genTorchDataset(50)
    print(100 * model.evaluateAveragePerformance(test_sample))